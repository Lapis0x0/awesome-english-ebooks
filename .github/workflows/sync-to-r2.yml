name: 同步外刊到Cloudflare R2

on:
  # 在同步上游仓库工作流完成后运行
  workflow_run:
    workflows: ["同步上游仓库"]
    types:
      - completed
  # 允许手动触发
  workflow_dispatch:

jobs:
  sync-to-r2:
    runs-on: ubuntu-latest
    # 只有当触发的工作流成功完成时才运行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      # 检出当前仓库代码（使用稀疏检出策略，只检出必要的目录结构）
      - name: 检出当前仓库
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          sparse-checkout: |
            01_economist
            02_new_yorker
            04_atlantic
            05_wired
          sparse-checkout-cone-mode: true
      
      # 安装必要的工具
      - name: 安装curl和jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
      
      # 列出目录内容，以便于调试
      - name: 列出目录内容
        run: |
          echo "列出经济学人目录内容："
          ls -la ./01_economist || echo "经济学人目录不存在"
          echo "列出纽约客目录内容："
          ls -la ./02_new_yorker || echo "纽约客目录不存在"
          echo "列出Atlantic目录内容："
          ls -la ./04_atlantic || echo "Atlantic目录不存在"
          echo "列出Wired目录内容："
          ls -la ./05_wired || echo "Wired目录不存在"
      
      # 查找最新的经济学人文件
      - name: 查找最新的经济学人文件
        id: economist
        run: |
          if [ -d "./01_economist" ]; then
            LATEST_ECONOMIST_DIR=$(find ./01_economist -maxdepth 1 -type d -name "te_*" | sort -r | head -n 1)
            echo "latest_dir=$LATEST_ECONOMIST_DIR" >> $GITHUB_OUTPUT
            
            # 从目录名中提取日期（格式如te_2025.04.05）
            if [ -n "$LATEST_ECONOMIST_DIR" ]; then
              DIR_NAME=$(basename "$LATEST_ECONOMIST_DIR")
              ECONOMIST_DATE=$(echo "$DIR_NAME" | sed 's/te_//')
              echo "date=$ECONOMIST_DATE" >> $GITHUB_OUTPUT
              echo "找到最新的经济学人目录: $LATEST_ECONOMIST_DIR，日期: $ECONOMIST_DATE"
            fi
          else
            echo "经济学人目录不存在"
            echo "latest_dir=" >> $GITHUB_OUTPUT
          fi
      
      # 查找最新的纽约客文件
      - name: 查找最新的纽约客文件
        id: newyorker
        run: |
          if [ -d "./02_new_yorker" ]; then
            LATEST_NEWYORKER_DIR=$(find ./02_new_yorker -maxdepth 1 -type d -mindepth 1 -not -path "*/\.*" | sort -r | head -n 1)
            echo "latest_dir=$LATEST_NEWYORKER_DIR" >> $GITHUB_OUTPUT
            
            # 从目录名中提取日期
            if [ -n "$LATEST_NEWYORKER_DIR" ]; then
              DIR_NAME=$(basename "$LATEST_NEWYORKER_DIR")
              echo "date=$DIR_NAME" >> $GITHUB_OUTPUT
              echo "找到最新的纽约客目录: $LATEST_NEWYORKER_DIR，日期: $DIR_NAME"
            fi
          else
            echo "纽约客目录不存在"
            echo "latest_dir=" >> $GITHUB_OUTPUT
          fi
      
      # 使用Cloudflare API上传文件的函数
      - name: 设置上传函数
        run: |
          # 创建上传函数
          upload_to_r2() {
            local file_path="$1"
            local r2_key="$2"
            local filename=$(basename "$file_path")
            local content_type="application/pdf"
            
            echo "正在上传文件: $filename 到 $r2_key"
            
            # 使用Cloudflare API直接上传
            response=$(curl -s -X PUT \
              "https://api.cloudflare.com/client/v4/accounts/${{ secrets.R2_ACCOUNT_ID }}/r2/buckets/${{ secrets.R2_BUCKET_NAME }}/objects/$r2_key" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: $content_type" \
              --data-binary @"$file_path")
            
            # 检查上传结果
            success=$(echo $response | jq -r '.success')
            if [ "$success" = "true" ]; then
              echo "文件上传成功: $r2_key"
              return 0
            else
              echo "文件上传失败: $r2_key"
              echo "错误信息: $response"
              return 1
            fi
          }
          
          # 将函数导出到环境中，以便其他步骤使用
          echo "upload_to_r2() {
            local file_path=\"\$1\"
            local r2_key=\"\$2\"
            local filename=\$(basename \"\$file_path\")
            local content_type=\"application/pdf\"
            
            echo \"正在上传文件: \$filename 到 \$r2_key\"
            
            # 使用Cloudflare API直接上传
            response=\$(curl -s -X PUT \\
              \"https://api.cloudflare.com/client/v4/accounts/${{ secrets.R2_ACCOUNT_ID }}/r2/buckets/${{ secrets.R2_BUCKET_NAME }}/objects/\$r2_key\" \\
              -H \"Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}\" \\
              -H \"Content-Type: \$content_type\" \\
              --data-binary @\"\$file_path\")
            
            # 检查上传结果
            success=\$(echo \$response | jq -r '.success')
            if [ \"\$success\" = \"true\" ]; then
              echo \"文件上传成功: \$r2_key\"
              return 0
            else
              echo \"文件上传失败: \$r2_key\"
              echo \"错误信息: \$response\"
              return 1
            fi
          }" > /tmp/upload_function.sh
          
          chmod +x /tmp/upload_function.sh
      
      # 同步经济学人到R2
      - name: 同步经济学人到R2
        if: steps.economist.outputs.latest_dir != ''
        run: |
          # 导入上传函数
          source /tmp/upload_function.sh
          
          echo "开始同步经济学人目录: ${{ steps.economist.outputs.latest_dir }}"
          
          if [ -d "${{ steps.economist.outputs.latest_dir }}" ]; then
            # 只上传PDF文件
            for file in "${{ steps.economist.outputs.latest_dir }}"/*.pdf; do
              if [ -f "$file" ]; then
                # 构建R2路径
                r2_key="2.外刊/经济学人/${{ steps.economist.outputs.date }}/$(basename "$file")"
                
                # 上传文件
                upload_to_r2 "$file" "$r2_key"
              fi
            done
            echo "已同步经济学人PDF到R2"
          else
            echo "经济学人目录不存在或为空: ${{ steps.economist.outputs.latest_dir }}"
          fi
      
      # 同步纽约客到R2
      - name: 同步纽约客到R2
        if: steps.newyorker.outputs.latest_dir != ''
        run: |
          # 导入上传函数
          source /tmp/upload_function.sh
          
          if [ -d "${{ steps.newyorker.outputs.latest_dir }}" ]; then
            # 只上传PDF文件
            for file in "${{ steps.newyorker.outputs.latest_dir }}"/*.pdf; do
              if [ -f "$file" ]; then
                # 构建R2路径
                r2_key="2.外刊/纽约客/${{ steps.newyorker.outputs.date }}/$(basename "$file")"
                
                # 上传文件
                upload_to_r2 "$file" "$r2_key"
              fi
            done
            echo "已同步纽约客PDF到R2"
          else
            echo "纽约客目录不存在或为空: ${{ steps.newyorker.outputs.latest_dir }}"
          fi
      
      # 同步The Atlantic到R2（如果有更新）
      - name: 同步The Atlantic到R2
        run: |
          # 导入上传函数
          source /tmp/upload_function.sh
          
          if [ -d "./04_atlantic" ]; then
            LATEST_ATLANTIC_DIR=$(find ./04_atlantic -maxdepth 1 -type d -mindepth 1 -not -path "*/\.*" | sort -r | head -n 1)
            if [ -n "$LATEST_ATLANTIC_DIR" ] && [ -d "$LATEST_ATLANTIC_DIR" ]; then
              # 从目录名中提取日期
              DIR_NAME=$(basename "$LATEST_ATLANTIC_DIR")
              ATLANTIC_DATE=$DIR_NAME
              echo "找到最新的大西洋月刊目录: $LATEST_ATLANTIC_DIR，日期: $ATLANTIC_DATE"
              
              # 只上传PDF文件
              for file in "$LATEST_ATLANTIC_DIR"/*.pdf; do
                if [ -f "$file" ]; then
                  # 构建R2路径
                  r2_key="2.外刊/大西洋月刊/$ATLANTIC_DATE/$(basename "$file")"
                  
                  # 上传文件
                  upload_to_r2 "$file" "$r2_key"
                fi
              done
              echo "已同步The Atlantic PDF到R2"
            else
              echo "未找到有效的The Atlantic目录"
            fi
          else
            echo "Atlantic目录不存在"
          fi
      
      # 同步Wired到R2（如果有更新）
      - name: 同步Wired到R2
        run: |
          # 导入上传函数
          source /tmp/upload_function.sh
          
          if [ -d "./05_wired" ]; then
            LATEST_WIRED_DIR=$(find ./05_wired -maxdepth 1 -type d -mindepth 1 -not -path "*/\.*" | sort -r | head -n 1)
            if [ -n "$LATEST_WIRED_DIR" ] && [ -d "$LATEST_WIRED_DIR" ]; then
              # 从目录名中提取日期
              DIR_NAME=$(basename "$LATEST_WIRED_DIR")
              WIRED_DATE=$DIR_NAME
              echo "找到最新的连线杂志目录: $LATEST_WIRED_DIR，日期: $WIRED_DATE"
              
              # 只上传PDF文件
              for file in "$LATEST_WIRED_DIR"/*.pdf; do
                if [ -f "$file" ]; then
                  # 构建R2路径
                  r2_key="2.外刊/连线杂志/$WIRED_DATE/$(basename "$file")"
                  
                  # 上传文件
                  upload_to_r2 "$file" "$r2_key"
                fi
              done
              echo "已同步Wired PDF到R2"
            else
              echo "未找到有效的Wired目录"
            fi
          else
            echo "Wired目录不存在"
          fi
