name: 同步外刊到Obsidian

on:
  # 在同步上游仓库工作流完成后运行
  workflow_run:
    workflows: ["同步上游仓库"]
    types:
      - completed
  # 允许手动触发
  workflow_dispatch:

jobs:
  sync-to-cos:
    runs-on: ubuntu-latest
    # 只有当触发的工作流成功完成时才运行
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      # 缓存仓库内容
      - name: 缓存仓库
        id: cache-repo
        uses: actions/cache@v3
        with:
          path: |
            ./01_economist
            ./02_new_yorker
            ./04_atlantic
            ./05_wired
          key: repo-content-${{ github.sha }}
          restore-keys: |
            repo-content-

      # 如果缓存未命中，检出当前仓库代码（使用稀疏检出策略，只检出必要的目录结构）
      - name: 检出当前仓库
        if: steps.cache-repo.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          sparse-checkout: |
            01_economist
            02_new_yorker
            04_atlantic
            05_wired
          sparse-checkout-cone-mode: true
      
      # 安装AWS CLI
      - name: 安装AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2
      
      # 配置AWS凭证（用于访问腾讯云COS）
      - name: 配置AWS凭证
        run: |
          mkdir -p ~/.aws
          cat > ~/.aws/credentials << EOF
          [default]
          aws_access_key_id = ${{ secrets.COS_SECRET_ID }}
          aws_secret_access_key = ${{ secrets.COS_SECRET_KEY }}
          EOF
          
          cat > ~/.aws/config << EOF
          [default]
          region = ${{ secrets.COS_REGION }}
          output = json
          s3 =
            addressing_style = virtual
            endpoint_url = https://cos.${{ secrets.COS_REGION }}.myqcloud.com
          EOF
          
          # 验证配置是否生效
          echo "AWS CLI配置完成，当前配置："
          aws configure list
          
      # 缓存AWS CLI配置
      - name: 缓存AWS CLI配置
        uses: actions/cache@v3
        with:
          path: ~/.aws
          key: aws-cli-config-${{ runner.os }}
      
      # 获取当前日期
      - name: 获取当前日期
        id: date
        run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT
      
      # 列出目录内容，以便于调试
      - name: 列出目录内容
        run: |
          echo "列出经济学人目录内容："
          ls -la ./01_economist || echo "经济学人目录不存在"
          echo "列出纽约客目录内容："
          ls -la ./02_new_yorker || echo "纽约客目录不存在"
          echo "列出Atlantic目录内容："
          ls -la ./04_atlantic || echo "Atlantic目录不存在"
          echo "列出Wired目录内容："
          ls -la ./05_wired || echo "Wired目录不存在"
      
      # 查找最新的经济学人文件
      - name: 查找最新的经济学人文件
        id: economist
        run: |
          if [ -d "./01_economist" ]; then
            LATEST_ECONOMIST_DIR=$(find ./01_economist -maxdepth 1 -type d -name "te_*" | sort -r | head -n 1)
            echo "latest_dir=$LATEST_ECONOMIST_DIR" >> $GITHUB_OUTPUT
            echo "找到最新的经济学人目录: $LATEST_ECONOMIST_DIR"
          else
            echo "经济学人目录不存在"
            echo "latest_dir=" >> $GITHUB_OUTPUT
          fi
      
      # 查找最新的纽约客文件
      - name: 查找最新的纽约客文件
        id: newyorker
        run: |
          if [ -d "./02_new_yorker" ]; then
            LATEST_NEWYORKER_DIR=$(find ./02_new_yorker -maxdepth 1 -type d -mindepth 1 -not -path "*/\.*" | sort -r | head -n 1)
            echo "latest_dir=$LATEST_NEWYORKER_DIR" >> $GITHUB_OUTPUT
            echo "找到最新的纽约客目录: $LATEST_NEWYORKER_DIR"
          else
            echo "纽约客目录不存在"
            echo "latest_dir=" >> $GITHUB_OUTPUT
          fi
      
      # 同步经济学人到COS
      - name: 同步经济学人到COS
        if: steps.economist.outputs.latest_dir != ''
        run: |
          echo "配置AWS S3寻址样式"
          aws configure set default.s3.addressing_style virtual
          
          # 设置分片上传参数
          export AWS_S3_MULTIPART_THRESHOLD=8MB  # 默认为8MB
          export AWS_S3_MAX_CONCURRENT_REQUESTS=10
          export AWS_S3_MAX_QUEUE_SIZE=1000
          
          echo "开始同步经济学人目录: ${{ steps.economist.outputs.latest_dir }}"
          
          if [ -d "${{ steps.economist.outputs.latest_dir }}" ]; then
            # 只上传PDF文件
            for file in "${{ steps.economist.outputs.latest_dir }}"/*.pdf; do
              if [ -f "$file" ]; then
                echo "正在上传PDF文件: $file"
                # 获取文件大小用于日志输出
                file_size=$(stat -c%s "$file")
                echo "文件大小: $file_size 字节"
                
                # 提取文件名
                filename=$(basename "$file")
                
                # 尝试使用标准命令上传
                echo "使用标准方式上传文件..."
                # 使用--sse-c-key参数强制设置Content-Length头
                if ! aws s3 cp "$file" "s3://${{ secrets.COS_BUCKET }}/2.外刊/经济学人/${{ steps.date.outputs.date }}/$filename" \
                  --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com \
                  --expected-size $file_size; then
                  
                  echo "标准上传失败，尝试使用低级命令上传..."
                  # 如果标准命令失败，使用低级命令
                  aws s3api put-object \
                    --bucket ${{ secrets.COS_BUCKET }} \
                    --key "2.外刊/经济学人/${{ steps.date.outputs.date }}/$filename" \
                    --body "$file" \
                    --content-length $file_size \
                    --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com
                fi
              fi
            done
            echo "已同步经济学人PDF到COS"
          else
            echo "经济学人目录不存在或为空: ${{ steps.economist.outputs.latest_dir }}"
          fi
      
      # 同步纽约客到COS
      - name: 同步纽约客到COS
        if: steps.newyorker.outputs.latest_dir != ''
        run: |
          # 复用已设置的AWS配置
          
          if [ -d "${{ steps.newyorker.outputs.latest_dir }}" ]; then
            # 只上传PDF文件
            for file in "${{ steps.newyorker.outputs.latest_dir }}"/*.pdf; do
              if [ -f "$file" ]; then
                echo "正在上传PDF文件: $file"
                # 获取文件大小用于日志输出
                file_size=$(stat -c%s "$file")
                echo "文件大小: $file_size 字节"
                
                # 提取文件名
                filename=$(basename "$file")
                
                # 尝试使用标准命令上传
                echo "使用标准方式上传文件..."
                if ! aws s3 cp "$file" "s3://${{ secrets.COS_BUCKET }}/2.外刊/纽约客/${{ steps.date.outputs.date }}/$filename" \
                  --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com \
                  --expected-size $file_size; then
                  
                  echo "标准上传失败，尝试使用低级命令上传..."
                  # 如果标准命令失败，使用低级命令
                  aws s3api put-object \
                    --bucket ${{ secrets.COS_BUCKET }} \
                    --key "2.外刊/纽约客/${{ steps.date.outputs.date }}/$filename" \
                    --body "$file" \
                    --content-length $file_size \
                    --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com
                fi
              fi
            done
            echo "已同步纽约客PDF到COS"
          else
            echo "纽约客目录不存在或为空: ${{ steps.newyorker.outputs.latest_dir }}"
          fi
      
      # 同步The Atlantic到COS（如果有更新）
      - name: 同步The Atlantic到COS
        run: |
          if [ -d "./04_atlantic" ]; then
            LATEST_ATLANTIC_DIR=$(find ./04_atlantic -maxdepth 1 -type d -mindepth 1 -not -path "*/\.*" | sort -r | head -n 1)
            if [ -n "$LATEST_ATLANTIC_DIR" ] && [ -d "$LATEST_ATLANTIC_DIR" ]; then
              # 只上传PDF文件
              for file in "$LATEST_ATLANTIC_DIR"/*.pdf; do
                if [ -f "$file" ]; then
                  echo "正在上传PDF文件: $file"
                  # 获取文件大小用于日志输出
                  file_size=$(stat -c%s "$file")
                  echo "文件大小: $file_size 字节"
                  
                  # 提取文件名
                  filename=$(basename "$file")
                  
                  # 尝试使用标准命令上传
                  echo "使用标准方式上传文件..."
                  if ! aws s3 cp "$file" "s3://${{ secrets.COS_BUCKET }}/2.外刊/大西洋月刊/${{ steps.date.outputs.date }}/$filename" \
                    --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com \
                    --expected-size $file_size; then
                    
                    echo "标准上传失败，尝试使用低级命令上传..."
                    # 如果标准命令失败，使用低级命令
                    aws s3api put-object \
                      --bucket ${{ secrets.COS_BUCKET }} \
                      --key "2.外刊/大西洋月刊/${{ steps.date.outputs.date }}/$filename" \
                      --body "$file" \
                      --content-length $file_size \
                      --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com
                  fi
                fi
              done
              echo "已同步The Atlantic PDF到COS"
            else
              echo "未找到有效的The Atlantic目录"
            fi
          else
            echo "Atlantic目录不存在"
          fi
      
      # 同步Wired到COS（如果有更新）
      - name: 同步Wired到COS
        run: |
          if [ -d "./05_wired" ]; then
            LATEST_WIRED_DIR=$(find ./05_wired -maxdepth 1 -type d -mindepth 1 -not -path "*/\.*" | sort -r | head -n 1)
            if [ -n "$LATEST_WIRED_DIR" ] && [ -d "$LATEST_WIRED_DIR" ]; then
              # 只上传PDF文件
              for file in "$LATEST_WIRED_DIR"/*.pdf; do
                if [ -f "$file" ]; then
                  echo "正在上传PDF文件: $file"
                  # 获取文件大小用于日志输出
                  file_size=$(stat -c%s "$file")
                  echo "文件大小: $file_size 字节"
                  
                  # 提取文件名
                  filename=$(basename "$file")
                  
                  # 尝试使用标准命令上传
                  echo "使用标准方式上传文件..."
                  if ! aws s3 cp "$file" "s3://${{ secrets.COS_BUCKET }}/2.外刊/连线杂志/${{ steps.date.outputs.date }}/$filename" \
                    --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com \
                    --expected-size $file_size; then
                    
                    echo "标准上传失败，尝试使用低级命令上传..."
                    # 如果标准命令失败，使用低级命令
                    aws s3api put-object \
                      --bucket ${{ secrets.COS_BUCKET }} \
                      --key "2.外刊/连线杂志/${{ steps.date.outputs.date }}/$filename" \
                      --body "$file" \
                      --content-length $file_size \
                      --endpoint-url=https://cos.${{ secrets.COS_REGION }}.myqcloud.com
                  fi
                fi
              done
              echo "已同步Wired PDF到COS"
            else
              echo "未找到有效的Wired目录"
            fi
          else
            echo "Wired目录不存在"
          fi
